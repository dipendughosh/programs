library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
 
entity ALU_4_bit is
   port( Carry_Out: out std_logic;
         Flag: out std_logic;
         Nibble1: in std_logic_vector(3 downto 0);
         Nibble2: in std_logic_vector(3 downto 0);
         Operation: in std_logic_vector(2 downto 0);
         result: out std_logic_vector(3 downto 0));
end ALU_4_bit;
 
architecture Behavioral of ALU_4_bit is
   signal temp: std_logic_vector(4 downto 0);
   
begin
   process(Nibble1,Nibble2,Operation,temp)
   begin
      Flag <= '0';
      case Operation is 
         when "000" => 
            temp <= conv_std_logic_vector((conv_integer(Nibble1) + conv_integer(Nibble2)),5);
            result <= temp(3 downto 0);
            Carry_Out <= temp(4);
         when "001" =>
            if Nibble1 >= Nibble2 then
               result <= Nibble1 - Nibble2;
               Flag <= '0';
            else
               result <= Nibble2 - Nibble1;
               Flag <= '1';
            end if;
         when "010" =>
            result <= Nibble1 and Nibble2;
         when "011" =>   
            result <= Nibble1 or Nibble2;
         when "100" =>
            result <= Nibble1 xor Nibble2;
         when "101" =>
            result <= not Nibble1;
         when "110" =>
            result <= not Nibble2;
         when others =>
            temp <= conv_std_logic_vector((conv_integer(Nibble1) + conv_integer(not Nibble2)) + 1,  5);
            result <= temp(3 downto 0);
      end case;
   end process;
end Behavioral;